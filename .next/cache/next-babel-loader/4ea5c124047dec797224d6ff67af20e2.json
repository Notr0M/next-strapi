{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from \"graphql-tag\";\nimport Link from \"next/link\";\nimport { graphql } from \"react-apollo\";\nimport { Button, Card, CardBody, CardColumns, CardImg, CardSubtitle } from \"reactstrap\";\nimport { CardText, CardTitle, Col, Row } from \"reactstrap\";\n\nconst RestaurantList = ({\n  data: {\n    loading,\n    error,\n    restaurants\n  },\n  search\n}, req) => {\n  if (error) return \"Error loading restaurants\"; //if restaurants are returned from the GraphQL query, run the filter query\n  //and set equal to variable restaurantSearch\n\n  if (restaurants && restaurants.length) {\n    //searchQuery\n    const searchQuery = restaurants.filter(query => query.name.toLowerCase().includes(search));\n\n    if (searchQuery.length != 0) {\n      return __jsx(\"div\", {\n        className: \"jsx-1272619790\"\n      }, __jsx(\"div\", {\n        className: \"jsx-1272619790\" + \" \" + \"h-100\"\n      }, searchQuery.map(res => __jsx(Card, {\n        style: {\n          width: \"30%\",\n          margin: \"0 10px\"\n        },\n        className: \"h-100\",\n        key: res._id\n      }, __jsx(CardImg, {\n        top: true,\n        style: {\n          height: 250\n        },\n        src: `http://localhost:1337${res.image[0].url}`,\n        alt: `${res.name}`\n      }), __jsx(CardBody, null, __jsx(CardTitle, null, res.name), __jsx(CardText, null, res.description)), __jsx(\"div\", {\n        className: \"jsx-1272619790\" + \" \" + \"card-footer\"\n      }, __jsx(Link, {\n        as: `/restaurants/${res._id}`,\n        href: `/restaurants?id=${res._id}`\n      }, __jsx(\"a\", {\n        className: \"jsx-1272619790\" + \" \" + \"btn btn-primary\"\n      }, \"View\")))))), __jsx(_JSXStyle, {\n        id: \"1272619790\"\n      }, [\"a{color:white;}\", \"a:link{-webkit-text-decoration:none;text-decoration:none;color:white;}\", \"a:hover{color:white;}\", \".card-columns{-webkit-column-count:3;column-count:3;}\"]));\n    } else {\n      return __jsx(\"h1\", null, \"No Restaurants Found\");\n    }\n  }\n\n  return __jsx(\"h1\", null, \"Loading\");\n};\n\nconst query = gql`\n  {\n    restaurants {\n      _id\n      name\n      description\n      image {\n        url\n      }\n    }\n  }\n`;\n\nRestaurantList.getStaticProps = async ({\n  req\n}) => {}; // The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (RestaurantList)\n\n\nexport default graphql(query, {\n  props: ({\n    data\n  }) => ({\n    data\n  })\n})(RestaurantList);","map":null,"metadata":{},"sourceType":"module"}