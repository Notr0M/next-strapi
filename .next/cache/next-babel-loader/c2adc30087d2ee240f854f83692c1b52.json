{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"F:\\\\mywork\\\\next-projects\\\\shoping\\\\frontend\\\\components\\\\RestaurantList\\\\index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n//import gql from \"graphql-tag\";\nimport Link from \"next/link\"; //import { graphql } from \"react-apollo\";\n\nimport { Button, Card, CardBody, CardColumns, CardImg, CardSubtitle } from \"reactstrap\";\nimport { CardText, CardTitle, Col, Row } from \"reactstrap\";\n\nvar RestaurantList = function RestaurantList(_ref) {\n  var restaurants = _ref.restaurants,\n      search = _ref.search;\n  //if (error) return \"Error loading restaurants\";\n  //if restaurants are returned from the GraphQL query, run the filter query\n  //and set equal to variable restaurantSearch\n  return __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 10\n    }\n  }, \"Loading\");\n};\n\nexport function getStaticProps() {\n  var res, restaurants;\n  return _regeneratorRuntime.async(function getStaticProps$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // Call an external API endpoint to get posts\n          console.log(\"here\");\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:1337/restaurants\"));\n\n        case 3:\n          res = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 6:\n          restaurants = _context.sent;\n          console.log(restaurants); // By returning { props: posts }, the Blog component\n          // will receive `posts` as a prop at build time\n\n          return _context.abrupt(\"return\", {\n            props: {\n              restaurants: restaurants\n            }\n          });\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport default RestaurantList;\n/*\r\nconst query = gql`\r\n  {\r\n    restaurants {\r\n      _id\r\n      name\r\n      description\r\n      image {\r\n        url\r\n      }\r\n    }\r\n  }\r\n`;\r\nRestaurantList.getStaticProps = async ({ req }) => {};\r\n// The `graphql` wrapper executes a GraphQL query and makes the results\r\n// available on the `data` prop of the wrapped component (RestaurantList)\r\nexport default graphql(query, {\r\n  props: ({ data }) => ({\r\n    data,\r\n  }),\r\n})(RestaurantList);\r\n*/","map":{"version":3,"sources":["F:/mywork/next-projects/shoping/frontend/components/RestaurantList/index.js"],"names":["Link","Button","Card","CardBody","CardColumns","CardImg","CardSubtitle","CardText","CardTitle","Col","Row","RestaurantList","restaurants","search","getStaticProps","console","log","fetch","res","json","props"],"mappings":";;;;;;;AAAA;AACA,OAAOA,IAAP,MAAiB,WAAjB,C,CACA;;AAEA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,WAJF,EAKEC,OALF,EAMEC,YANF,QAOO,YAPP;AAQA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,GAA9B,EAAmCC,GAAnC,QAA8C,YAA9C;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAA6B;AAAA,MAA1BC,WAA0B,QAA1BA,WAA0B;AAAA,MAAbC,MAAa,QAAbA,MAAa;AAClD;AACA;AACA;AAEA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD,CAND;;AAQA,OAAO,SAAeC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAFK;AAAA,2CAGaC,KAAK,CAAC,mCAAD,CAHlB;;AAAA;AAGCC,UAAAA,GAHD;AAAA;AAAA,2CAIqBA,GAAG,CAACC,IAAJ,EAJrB;;AAAA;AAICP,UAAAA,WAJD;AAKLG,UAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ,EALK,CAML;AACA;;AAPK,2CAQE;AACLQ,YAAAA,KAAK,EAAE;AACLR,cAAAA,WAAW,EAAXA;AADK;AADF,WARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,eAAeD,cAAf;AACA","sourcesContent":["//import gql from \"graphql-tag\";\r\nimport Link from \"next/link\";\r\n//import { graphql } from \"react-apollo\";\r\n\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardColumns,\r\n  CardImg,\r\n  CardSubtitle,\r\n} from \"reactstrap\";\r\nimport { CardText, CardTitle, Col, Row } from \"reactstrap\";\r\n\r\nconst RestaurantList = ({ restaurants, search }) => {\r\n  //if (error) return \"Error loading restaurants\";\r\n  //if restaurants are returned from the GraphQL query, run the filter query\r\n  //and set equal to variable restaurantSearch\r\n\r\n  return <h1>Loading</h1>;\r\n};\r\n\r\nexport async function getStaticProps() {\r\n  // Call an external API endpoint to get posts\r\n  console.log(\"here\");\r\n  const res = await fetch(\"http://localhost:1337/restaurants\");\r\n  const restaurants = await res.json();\r\n  console.log(restaurants);\r\n  // By returning { props: posts }, the Blog component\r\n  // will receive `posts` as a prop at build time\r\n  return {\r\n    props: {\r\n      restaurants,\r\n    },\r\n  };\r\n}\r\nexport default RestaurantList;\r\n/*\r\nconst query = gql`\r\n  {\r\n    restaurants {\r\n      _id\r\n      name\r\n      description\r\n      image {\r\n        url\r\n      }\r\n    }\r\n  }\r\n`;\r\nRestaurantList.getStaticProps = async ({ req }) => {};\r\n// The `graphql` wrapper executes a GraphQL query and makes the results\r\n// available on the `data` prop of the wrapped component (RestaurantList)\r\nexport default graphql(query, {\r\n  props: ({ data }) => ({\r\n    data,\r\n  }),\r\n})(RestaurantList);\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}