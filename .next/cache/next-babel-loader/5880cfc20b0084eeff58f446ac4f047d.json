{"ast":null,"code":"import withApollo from \"next-with-apollo\"; // import ApolloClient, { InMemoryCache } from \"apollo-boost\";\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nvar cache = new InMemoryCache();\nvar link = new HttpLink({\n  uri: \"http://localhost:1337/graphql\"\n});\n/* const client = new ApolloClient({\r\n  // Provide required constructor fields\r\n  cache: cache,\r\n  link: link,\r\n\r\n  // Provide some optional constructor fields\r\n  name: \"shoping-frondend\",\r\n  version: \"0.1.0\",\r\n  queryDeduplication: false,\r\n  defaultOptions: {\r\n    watchQuery: {\r\n      fetchPolicy: \"cache-and-network\",\r\n    },\r\n  },\r\n}); */\n\nexport default withApollo( // You can get headers and ctx (context) from the callback params\n// e.g. ({ headers, ctx, initialState })\nfunction (_ref) {\n  var initialState = _ref.initialState;\n  console.log(initialState);\n  return new ApolloClient({\n    link: link,\n    cache: cache //  rehydrate the cache using the initial data passed from the server:\n    .restore(initialState || {})\n  });\n});","map":{"version":3,"sources":["F:/mywork/next-projects/shoping/frontend/lib/apollo.js"],"names":["withApollo","ApolloClient","InMemoryCache","HttpLink","cache","link","uri","initialState","console","log","restore"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,kBAAvB,C,CACA;;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,IAAMC,KAAK,GAAG,IAAIF,aAAJ,EAAd;AACA,IAAMG,IAAI,GAAG,IAAIF,QAAJ,CAAa;AACxBG,EAAAA,GAAG,EAAE;AADmB,CAAb,CAAb;AAIA;;;;;;;;;;;;;;;;AAgBA,eAAeN,UAAU,EACvB;AACA;AACA,gBAAsB;AAAA,MAAnBO,YAAmB,QAAnBA,YAAmB;AACpBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,SAAO,IAAIN,YAAJ,CAAiB;AACtBI,IAAAA,IAAI,EAAEA,IADgB;AAEtBD,IAAAA,KAAK,EAAEA,KAAK,CACV;AADU,KAETM,OAFI,CAEIH,YAAY,IAAI,EAFpB;AAFe,GAAjB,CAAP;AAMD,CAXsB,CAAzB","sourcesContent":["import withApollo from \"next-with-apollo\";\r\n// import ApolloClient, { InMemoryCache } from \"apollo-boost\";\r\nimport { ApolloClient } from \"apollo-client\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink } from \"apollo-link-http\";\r\n\r\nconst cache = new InMemoryCache();\r\nconst link = new HttpLink({\r\n  uri: \"http://localhost:1337/graphql\",\r\n});\r\n\r\n/* const client = new ApolloClient({\r\n  // Provide required constructor fields\r\n  cache: cache,\r\n  link: link,\r\n\r\n  // Provide some optional constructor fields\r\n  name: \"shoping-frondend\",\r\n  version: \"0.1.0\",\r\n  queryDeduplication: false,\r\n  defaultOptions: {\r\n    watchQuery: {\r\n      fetchPolicy: \"cache-and-network\",\r\n    },\r\n  },\r\n}); */\r\n\r\nexport default withApollo(\r\n  // You can get headers and ctx (context) from the callback params\r\n  // e.g. ({ headers, ctx, initialState })\r\n  ({ initialState }) => {\r\n    console.log(initialState);\r\n    return new ApolloClient({\r\n      link: link,\r\n      cache: cache\r\n        //  rehydrate the cache using the initial data passed from the server:\r\n        .restore(initialState || {}),\r\n    });\r\n  }\r\n);\r\n"]},"metadata":{},"sourceType":"module"}